# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/python@6.4.3)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, List, Optional, TypeVar, cast

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._serialization import Serializer
from .._vendor import MMAV3StatsMixinABC, _format_url_section

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_mmav3_stats_leagues_request(format: str = "XML", **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/{format}/Leagues"
    path_format_arguments = {
        "format": _SERIALIZER.url("format", format, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_mmav3_stats_fighters_request(format: str = "XML", **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/{format}/Fighters"
    path_format_arguments = {
        "format": _SERIALIZER.url("format", format, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_mmav3_stats_schedule_request(league: str, season: str, format: str = "XML", **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/{format}/Schedule/{league}/{season}"
    path_format_arguments = {
        "format": _SERIALIZER.url("format", format, "str"),
        "league": _SERIALIZER.url("league", league, "str"),
        "season": _SERIALIZER.url("season", season, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_mmav3_stats_event_request(eventid: str, format: str = "XML", **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/{format}/Event/{eventid}"
    path_format_arguments = {
        "format": _SERIALIZER.url("format", format, "str"),
        "eventid": _SERIALIZER.url("eventid", eventid, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_mmav3_stats_fight_request(fightid: str, format: str = "XML", **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/{format}/Fight/{fightid}"
    path_format_arguments = {
        "format": _SERIALIZER.url("format", format, "str"),
        "fightid": _SERIALIZER.url("fightid", fightid, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_mmav3_stats_fighter_request(fighterid: str, format: str = "XML", **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/{format}/Fighter/{fighterid}"
    path_format_arguments = {
        "format": _SERIALIZER.url("format", format, "str"),
        "fighterid": _SERIALIZER.url("fighterid", fighterid, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


class MMAV3StatsOperationsMixin(MMAV3StatsMixinABC):
    @distributed_trace
    def leagues(self, format: str = "XML", **kwargs: Any) -> List[JSON]:
        """Leagues.

        Leagues.

        :param format: Desired response format. Valid entries are :code:`<code>XML</code>` or
         :code:`<code>JSON</code>`. Known values are: "XML" and "JSON". Default value is "XML".
        :type format: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "Key": "str",  # Optional.
                        "LeagueId": 0,  # Optional.
                        "Name": "str"  # Optional.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        request = build_mmav3_stats_leagues_request(
            format=format,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)

    @distributed_trace
    def fighters(self, format: str = "XML", **kwargs: Any) -> List[JSON]:
        """Fighters.

        Fighters.

        :param format: Desired response format. Valid entries are :code:`<code>XML</code>` or
         :code:`<code>JSON</code>`. Known values are: "XML" and "JSON". Default value is "XML".
        :type format: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "BirthDate": "str",  # Optional.
                        "CareerStats": {
                            "DecisionPercentage": 0.0,  # Optional.
                            "FighterId": 0,  # Optional.
                            "FirstName": "str",  # Optional.
                            "KnockoutPercentage": 0.0,  # Optional.
                            "LastName": "str",  # Optional.
                            "SigStrikeAccuracy": 0.0,  # Optional.
                            "SigStrikesLandedPerMinute": 0.0,  # Optional.
                            "SubmissionAverage": 0.0,  # Optional.
                            "TakedownAverage": 0.0,  # Optional.
                            "TechnicalKnockoutPercentage": 0.0  # Optional.
                        },
                        "Draws": 0,  # Optional.
                        "FighterId": 0,  # Optional.
                        "FirstName": "str",  # Optional.
                        "Height": 0.0,  # Optional.
                        "LastName": "str",  # Optional.
                        "Losses": 0,  # Optional.
                        "Nickname": "str",  # Optional.
                        "NoContests": 0,  # Optional.
                        "Reach": 0.0,  # Optional.
                        "SubmissionLosses": 0,  # Optional.
                        "Submissions": 0,  # Optional.
                        "TechnicalKnockoutLosses": 0,  # Optional.
                        "TechnicalKnockouts": 0,  # Optional.
                        "TitleDraws": 0,  # Optional.
                        "TitleLosses": 0,  # Optional.
                        "TitleWins": 0,  # Optional.
                        "Weight": 0.0,  # Optional.
                        "WeightClass": "str",  # Optional.
                        "Wins": 0  # Optional.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        request = build_mmav3_stats_fighters_request(
            format=format,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)

    @distributed_trace
    def schedule(self, league: str, season: str, format: str = "XML", **kwargs: Any) -> List[JSON]:
        """Schedule.

        Schedule.

        :param league: The name of the league.:code:`<br>`Examples: :code:`<code>UFC</code>`, etc.
         Required.
        :type league: str
        :param season: Year of the season.:code:`<br>`Examples: :code:`<code>2019</code>`,
         :code:`<code>2020</code>`, etc. Required.
        :type season: str
        :param format: Desired response format. Valid entries are :code:`<code>XML</code>` or
         :code:`<code>JSON</code>`. Known values are: "XML" and "JSON". Default value is "XML".
        :type format: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "Active": bool,  # Optional.
                        "DateTime": "str",  # Optional.
                        "Day": "str",  # Optional.
                        "EventId": 0,  # Optional.
                        "LeagueId": 0,  # Optional.
                        "Name": "str",  # Optional.
                        "Season": 0,  # Optional.
                        "ShortName": "str",  # Optional.
                        "Status": "str"  # Optional.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        request = build_mmav3_stats_schedule_request(
            league=league,
            season=season,
            format=format,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)

    @distributed_trace
    def event(self, eventid: str, format: str = "XML", **kwargs: Any) -> JSON:
        """Event.

        Event.

        :param eventid: The unique ID of this event. :code:`<br>` Examples: :code:`<code>51</code>`,
         :code:`<code>52</code>`, etc. Required.
        :type eventid: str
        :param format: Desired response format. Valid entries are :code:`<code>XML</code>` or
         :code:`<code>JSON</code>`. Known values are: "XML" and "JSON". Default value is "XML".
        :type format: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "Active": bool,  # Optional.
                    "DateTime": "str",  # Optional.
                    "Day": "str",  # Optional.
                    "EventId": 0,  # Optional.
                    "Fights": [
                        {
                            "Active": bool,  # Optional.
                            "CardSegment": "str",  # Optional.
                            "FightId": 0,  # Optional.
                            "Fighters": [
                                {
                                    "Active": bool,  # Optional.
                                    "FighterId": 0,  # Optional.
                                    "FirstName": "str",  # Optional.
                                    "LastName": "str",  # Optional.
                                    "Moneyline": 0,  # Optional.
                                    "PreFightDraws": 0,  # Optional.
                                    "PreFightLosses": 0,  # Optional.
                                    "PreFightNoContests": 0,  # Optional.
                                    "PreFightWins": 0,  # Optional.
                                    "Winner": bool  # Optional.
                                }
                            ],
                            "Order": 0,  # Optional.
                            "Referee": "str",  # Optional.
                            "ResultClock": 0,  # Optional.
                            "ResultRound": 0,  # Optional.
                            "ResultType": "str",  # Optional.
                            "Rounds": 0,  # Optional.
                            "Status": "str",  # Optional.
                            "WeightClass": "str",  # Optional.
                            "WinnerId": 0  # Optional.
                        }
                    ],
                    "LeagueId": 0,  # Optional.
                    "Name": "str",  # Optional.
                    "Season": 0,  # Optional.
                    "ShortName": "str",  # Optional.
                    "Status": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_mmav3_stats_event_request(
            eventid=eventid,
            format=format,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def fight(self, fightid: str, format: str = "XML", **kwargs: Any) -> JSON:
        """Fight.

        Fight.

        :param fightid: The unique ID of this fight. :code:`<br>` Examples: :code:`<code>1100</code>`,
         etc. Required.
        :type fightid: str
        :param format: Desired response format. Valid entries are :code:`<code>XML</code>` or
         :code:`<code>JSON</code>`. Known values are: "XML" and "JSON". Default value is "XML".
        :type format: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "Active": bool,  # Optional.
                    "CardSegment": "str",  # Optional.
                    "FightId": 0,  # Optional.
                    "FightStats": [
                        {
                            "Advances": 0.0,  # Optional.
                            "DecisionWin": bool,  # Optional.
                            "FantasyPoints": 0.0,  # Optional.
                            "FantasyPointsDraftKings": 0.0,  # Optional.
                            "FifthRoundWin": bool,  # Optional.
                            "FighterId": 0,  # Optional.
                            "FirstName": "str",  # Optional.
                            "FirstRoundWin": bool,  # Optional.
                            "FourthRoundWin": bool,  # Optional.
                            "Knockdowns": 0.0,  # Optional.
                            "LastName": "str",  # Optional.
                            "Reversals": 0.0,  # Optional.
                            "SecondRoundWin": bool,  # Optional.
                            "SigStrikesAttempted": 0.0,  # Optional.
                            "SigStrikesLanded": 0.0,  # Optional.
                            "SlamRate": 0.0,  # Optional.
                            "Submissions": 0.0,  # Optional.
                            "TakedownAccuracy": 0.0,  # Optional.
                            "TakedownsAttempted": 0.0,  # Optional.
                            "TakedownsLanded": 0.0,  # Optional.
                            "TakedownsSlams": 0.0,  # Optional.
                            "ThirdRoundWin": bool,  # Optional.
                            "TimeInControl": 0.0,  # Optional.
                            "TotalStrikesAttempted": 0.0,  # Optional.
                            "TotalStrikesLanded": 0.0,  # Optional.
                            "Winner": bool  # Optional.
                        }
                    ],
                    "Fighters": [
                        {
                            "Active": bool,  # Optional.
                            "FighterId": 0,  # Optional.
                            "FirstName": "str",  # Optional.
                            "LastName": "str",  # Optional.
                            "Moneyline": 0,  # Optional.
                            "PreFightDraws": 0,  # Optional.
                            "PreFightLosses": 0,  # Optional.
                            "PreFightNoContests": 0,  # Optional.
                            "PreFightWins": 0,  # Optional.
                            "Winner": bool  # Optional.
                        }
                    ],
                    "Order": 0,  # Optional.
                    "Referee": "str",  # Optional.
                    "ResultClock": 0,  # Optional.
                    "ResultRound": 0,  # Optional.
                    "ResultType": "str",  # Optional.
                    "Rounds": 0,  # Optional.
                    "Status": "str",  # Optional.
                    "WeightClass": "str",  # Optional.
                    "WinnerId": 0  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_mmav3_stats_fight_request(
            fightid=fightid,
            format=format,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def fighter(self, fighterid: str, format: str = "XML", **kwargs: Any) -> JSON:
        """Fighter.

        Fighter.

        :param fighterid: Each fighter has a unique ID assigned by FantasyData. Fighter IDs can be
         determined by pulling player related data. Example: :code:`<code>140000098</code>`. Required.
        :type fighterid: str
        :param format: Desired response format. Valid entries are :code:`<code>XML</code>` or
         :code:`<code>JSON</code>`. Known values are: "XML" and "JSON". Default value is "XML".
        :type format: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "BirthDate": "str",  # Optional.
                    "CareerStats": {
                        "DecisionPercentage": 0.0,  # Optional.
                        "FighterId": 0,  # Optional.
                        "FirstName": "str",  # Optional.
                        "KnockoutPercentage": 0.0,  # Optional.
                        "LastName": "str",  # Optional.
                        "SigStrikeAccuracy": 0.0,  # Optional.
                        "SigStrikesLandedPerMinute": 0.0,  # Optional.
                        "SubmissionAverage": 0.0,  # Optional.
                        "TakedownAverage": 0.0,  # Optional.
                        "TechnicalKnockoutPercentage": 0.0  # Optional.
                    },
                    "Draws": 0,  # Optional.
                    "FighterId": 0,  # Optional.
                    "FirstName": "str",  # Optional.
                    "Height": 0.0,  # Optional.
                    "LastName": "str",  # Optional.
                    "Losses": 0,  # Optional.
                    "Nickname": "str",  # Optional.
                    "NoContests": 0,  # Optional.
                    "Reach": 0.0,  # Optional.
                    "SubmissionLosses": 0,  # Optional.
                    "Submissions": 0,  # Optional.
                    "TechnicalKnockoutLosses": 0,  # Optional.
                    "TechnicalKnockouts": 0,  # Optional.
                    "TitleDraws": 0,  # Optional.
                    "TitleLosses": 0,  # Optional.
                    "TitleWins": 0,  # Optional.
                    "Weight": 0.0,  # Optional.
                    "WeightClass": "str",  # Optional.
                    "Wins": 0  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_mmav3_stats_fighter_request(
            fighterid=fighterid,
            format=format,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)
